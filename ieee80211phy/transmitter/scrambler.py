"""
The DATA field, composed of SERVICE, PSDU, tail, and pad parts, shall be scrambled with a length-127
PPDU-synchronous scrambler. The octets of the PSDU are placed in the transmit serial bit stream, bit 0 first
and bit 7 last.
"""


def get_scrambling_sequence(length, initial_state):
    output = ''
    shr = initial_state
    for bit in range(length):
        feedback = str(int(shr[3]) ^ int(shr[6]))
        output += feedback
        shr = str(feedback) + shr[:-1]  # advance the shift register

    return output


def scrambler(data, initial_state='1011101'):
    scrambler = get_scrambling_sequence(len(data), initial_state)
    scrambled_data = [int(data[i]) ^ int(scrambler[i]) for i in range(len(data))]

    output = ''.join(str(bit) for bit in scrambled_data)
    return output


def test_scrambling_sequence_ones():
    """
    The 127-bit sequence generated repeatedly by the scrambler shall be (leftmost used first), 00001110
    11110010 11001001 00000010 00100110 00101110 10110110 00001100 11010100 11100111 10110100
    00101010 11111010 01010001 10111000 1111111, when the all 1s initial state is used.
    """
    expect = '0000111011110010110010010000001000100110001011101011011000001100110101001110011110110100001010101111101001010001101110001111111'
    result = get_scrambling_sequence(len(expect), '1111111')
    assert result == expect


def test_scrambling_sequence_table_i14():
    # Table I-14—Scrambling sequence for seed 1011101
    expect = '0110110000011001101010011100111101101000010101011111010010100011011100011111110000111011110010110010010000001000100110001011101'
    result = get_scrambling_sequence(len(expect), '1011101')
    assert result == expect


def test_i152():
    """
    IEEE Std 802.11-2016: I.1.4.2 Coding the SIGNAL field bits
    """

    # Table I-13—The DATA bits before scrambling
    input

    # Table I-15—The DATA bits after scrambling
    expect


    output = scrambler(input, initial_state='1011101')

    # restore the tail to zeros...
    output = list(output)
    output[816:822] = ['0', '0', '0', '0', '0', '0']
    output = ''.join(output)
    assert output == expect
