"""
The DATA field, composed of SERVICE, PSDU, tail, and pad parts, shall be scrambled with a length-127
PPDU-synchronous scrambler. The octets of the PSDU are placed in the transmit serial bit stream, bit 0 first
and bit 7 last.
"""


# def scrambler(data_bits: str) -> str:
#     output = ''
#     shr = '1011101'
#     for bit in data_bits:
#         feedback = int(shr[3]) ^ int(shr[6])
#         shr = str(feedback) + shr[:-1]
#         output += str(int(bit) ^ feedback)
#     return output


class bits(str):
    def __new__(cls, val: str):
        if val[0:2] in ('0x', '0X'):
            val = val[2:]
            num_of_bits = int(len(val) * np.log2(16))
            val = int_to_binstr(int(val, 16), num_of_bits)
            val = flip_byte_endian(val)  # IEE802.11 examples need this?!, tho it is confusing

        return str.__new__(cls, val)

    def __getitem__(self, item):
        return bits(self[item])

def scrambler(data: bits) -> bits:
    output = bits('')
    shr = bits('1011101')
    for bit in data:
        feedback = shr[3] ^ shr[6]
        shr = feedback + shr[:-1]
        output += bit ^ feedback
    return output


def descramble(scrambled_bits: str) -> str:
    """ Undo the 'scrambler' """
    return scrambler(scrambled_bits)


def test_i152():
    """
    IEEE Std 802.11-2016: I.1.4.2 Coding the SIGNAL field bits
    """

    # Table I-13â€”The DATA bits before scrambling
    input

    # Table I-15â€”The DATA bits after scrambling ( tail bits set to 0! )
    expect

    output = scrambler(input)

    # test reverse
    rev = descramble(output)
    assert rev == input

    # test against standard -> restore the tail bits to 0
    tail_zeroed = list(output)
    tail_zeroed[816:822] = ['0', '0', '0', '0', '0', '0']
    tail_zeroed = ''.join(tail_zeroed)
    assert tail_zeroed == expect
