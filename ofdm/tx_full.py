from training import get_short_training
import numpy as np

from training_long import get_long
from tx_ifft_guard import ifft_guard_window
from tx_mapper import mapper, inset_pilots_and_pad


def get_preamble():
    short = get_short_training()
    long = get_long()
    short[-1] += long[0]

    result = np.concatenate([short, long[1:]])
    return result


def get_signal_field():
    # TODO: this is currently hardcoded for the IEE example i.e.
    # Table I-9—SIGNAL field bits after interleaving
    input = '100101001101000000010100100000110010010010010100'
    input = np.array([1 if x == '1' else 0 for x in input])
    symbols = mapper(input, bits_per_symbol=1)
    symbols = inset_pilots_and_pad(symbols)
    time_domain = ifft_guard_window(symbols)
    return time_domain


def get_data_field(bits=None):
    bits = '011101111111000011101111110001000111001100000000101111110001000100010000100110100001110100010010011011100011100011110101011010010001101101101011100110000100001100000000000011011011001101101101'
    input = np.array([1 if x == '1' else 0 for x in bits])
    symbols = mapper(input, bits_per_symbol=4)
    symbols = inset_pilots_and_pad(symbols)
    time_domain = ifft_guard_window(symbols)
    return time_domain


def make_tx():
    preamble = get_preamble()
    signal = get_signal_field()
    preamble[-1] += signal[0]

    data1 = get_data_field()
    signal[-1] += data1[0]

    result = np.concatenate([preamble, signal[1:], data1[1:]])
    return result


def test_():
    # Table I-22—Time domain representation of the short training sequence
    expect_short_train = [(0.023 + 0.023j), (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j),
                          (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j),
                          (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j),
                          (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j),
                          (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j),
                          (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j),
                          (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j), (-0.013 - 0.079j),
                          (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j),
                          (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j,
                          (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j),
                          (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j),
                          (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j),
                          0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j),
                          (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j),
                          (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j),
                          (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j),
                          (0.046 + 0.046j), (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j),
                          (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j),
                          (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j),
                          (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j),
                          (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j),
                          (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j),
                          (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j), (-0.013 - 0.079j),
                          (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j), (-0.132 + 0.002j),
                          (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j), 0.092j,
                          (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j), (-0.132 + 0.002j),
                          (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j), (-0.013 - 0.079j),
                          (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j), (-0.013 + 0.143j),
                          0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j), (0.046 + 0.046j),
                          (-0.132 + 0.002j), (-0.013 - 0.079j), (0.143 - 0.013j), (0.092 + 0j), (0.143 - 0.013j),
                          (-0.013 - 0.079j), (-0.132 + 0.002j), (0.046 + 0.046j), (0.002 - 0.132j), (-0.079 - 0.013j),
                          (-0.013 + 0.143j), 0.092j, (-0.013 + 0.143j), (-0.079 - 0.013j), (0.002 - 0.132j)]

    # Table I-23—Time domain representation of the long training sequence
    expect_long_train = [(-0.055 + 0.023j), (0.012 - 0.098j), (0.092 - 0.106j), (-0.092 - 0.115j), (-0.003 - 0.054j),
                         (0.075 + 0.074j), (-0.127 + 0.021j), (-0.122 + 0.017j), (-0.035 + 0.151j), (-0.056 + 0.022j),
                         (-0.06 - 0.081j), (0.07 - 0.014j), (0.082 - 0.092j), (-0.131 - 0.065j), (-0.057 - 0.039j),
                         (0.037 - 0.098j), (0.062 + 0.062j), (0.119 + 0.004j), (-0.022 - 0.161j), (0.059 + 0.015j),
                         (0.024 + 0.059j), (-0.137 + 0.047j), (0.001 + 0.115j), (0.053 - 0.004j), (0.098 + 0.026j),
                         (-0.038 + 0.106j), (-0.115 + 0.055j), (0.06 + 0.088j), (0.021 - 0.028j), (0.097 - 0.083j),
                         (0.04 + 0.111j), (-0.005 + 0.12j), (0.156 + 0j), (-0.005 - 0.12j), (0.04 - 0.111j),
                         (0.097 + 0.083j), (0.021 + 0.028j), (0.06 - 0.088j), (-0.115 - 0.055j), (-0.038 - 0.106j),
                         (0.098 - 0.026j), (0.053 + 0.004j), (0.001 - 0.115j), (-0.137 - 0.047j), (0.024 - 0.059j),
                         (0.059 - 0.015j), (-0.022 + 0.161j), (0.119 - 0.004j), (0.062 - 0.062j), (0.037 + 0.098j),
                         (-0.057 + 0.039j), (-0.131 + 0.065j), (0.082 + 0.092j), (0.07 + 0.014j), (-0.06 + 0.081j),
                         (-0.056 - 0.022j), (-0.035 - 0.151j), (-0.122 - 0.017j), (-0.127 - 0.021j), (0.075 - 0.074j),
                         (-0.003 + 0.054j), (-0.092 + 0.115j), (0.092 + 0.106j), (0.012 + 0.098j), (-0.156 + 0j),
                         (0.012 - 0.098j), (0.092 - 0.106j), (-0.092 - 0.115j), (-0.003 - 0.054j), (0.075 + 0.074j),
                         (-0.127 + 0.021j), (-0.122 + 0.017j), (-0.035 + 0.151j), (-0.056 + 0.022j), (-0.06 - 0.081j),
                         (0.07 - 0.014j), (0.082 - 0.092j), (-0.131 - 0.065j), (-0.057 - 0.039j), (0.037 - 0.098j),
                         (0.062 + 0.062j), (0.119 + 0.004j), (-0.022 - 0.161j), (0.059 + 0.015j), (0.024 + 0.059j),
                         (-0.137 + 0.047j), (0.001 + 0.115j), (0.053 - 0.004j), (0.098 + 0.026j), (-0.038 + 0.106j),
                         (-0.115 + 0.055j), (0.06 + 0.088j), (0.021 - 0.028j), (0.097 - 0.083j), (0.04 + 0.111j),
                         (-0.005 + 0.12j), (0.156 + 0j), (-0.005 - 0.12j), (0.04 - 0.111j), (0.097 + 0.083j),
                         (0.021 + 0.028j), (0.06 - 0.088j), (-0.115 - 0.055j), (-0.038 - 0.106j), (0.098 - 0.026j),
                         (0.053 + 0.004j), (0.001 - 0.115j), (-0.137 - 0.047j), (0.024 - 0.059j), (0.059 - 0.015j),
                         (-0.022 + 0.161j), (0.119 - 0.004j), (0.062 - 0.062j), (0.037 + 0.098j), (-0.057 + 0.039j),
                         (-0.131 + 0.065j), (0.082 + 0.092j), (0.07 + 0.014j), (-0.06 + 0.081j), (-0.056 - 0.022j),
                         (-0.035 - 0.151j), (-0.122 - 0.017j), (-0.127 - 0.021j), (0.075 - 0.074j), (-0.003 + 0.054j),
                         (-0.092 + 0.115j), (0.092 + 0.106j), (0.012 + 0.098j), (-0.156 + 0j), (0.012 - 0.098j),
                         (0.092 - 0.106j), (-0.092 - 0.115j), (-0.003 - 0.054j), (0.075 + 0.074j), (-0.127 + 0.021j),
                         (-0.122 + 0.017j), (-0.035 + 0.151j), (-0.056 + 0.022j), (-0.06 - 0.081j), (0.07 - 0.014j),
                         (0.082 - 0.092j), (-0.131 - 0.065j), (-0.057 - 0.039j), (0.037 - 0.098j), (0.062 + 0.062j),
                         (0.119 + 0.004j), (-0.022 - 0.161j), (0.059 + 0.015j), (0.024 + 0.059j), (-0.137 + 0.047j),
                         (0.001 + 0.115j), (0.053 - 0.004j), (0.098 + 0.026j), (-0.038 + 0.106j), (-0.115 + 0.055j),
                         (0.06 + 0.088j), (0.021 - 0.028j), (0.097 - 0.083j), (0.04 + 0.111j), (-0.005 + 0.12j)]

    # Table I-24—Time domain representation of the SIGNAL field (1 symbol)
    expect_signal_field = [(0.109 + 0j), (0.033 - 0.044j), (-0.002 - 0.038j), (-0.081 + 0.084j), (0.007 - 0.1j),
                           (-0.001 - 0.113j), (-0.021 - 0.005j), (0.136 - 0.105j), (0.098 - 0.044j), (0.011 - 0.002j),
                           (-0.033 + 0.044j), (-0.06 + 0.124j), (0.01 + 0.097j), -0.008j, (0.018 - 0.083j),
                           (-0.069 + 0.027j), (-0.219 + 0j), (-0.069 - 0.027j), (0.018 + 0.083j), 0.008j,
                           (0.01 - 0.097j), (-0.06 - 0.124j), (-0.033 - 0.044j), (0.011 + 0.002j), (0.098 + 0.044j),
                           (0.136 + 0.105j), (-0.021 + 0.005j), (-0.001 + 0.113j), (0.007 + 0.1j), (-0.081 - 0.084j),
                           (-0.002 + 0.038j), (0.033 + 0.044j), (0.062 + 0j), (0.057 + 0.052j), (0.016 + 0.174j),
                           (0.035 + 0.116j), (-0.051 - 0.202j), (0.011 + 0.036j), (0.089 + 0.209j), (-0.049 - 0.008j),
                           (-0.035 + 0.044j), (0.017 - 0.059j), (0.053 - 0.017j), (0.099 + 0.1j), (0.034 - 0.148j),
                           (-0.003 - 0.094j), (-0.12 + 0.042j), (-0.136 - 0.07j), (-0.031 + 0j), (-0.136 + 0.07j),
                           (-0.12 - 0.042j), (-0.003 + 0.094j), (0.034 + 0.148j), (0.099 - 0.1j), (0.053 + 0.017j),
                           (0.017 + 0.059j), (-0.035 - 0.044j), (-0.049 + 0.008j), (0.089 - 0.209j), (0.011 - 0.036j),
                           (-0.051 + 0.202j), (0.035 - 0.116j), (0.016 - 0.174j), (0.057 - 0.052j), (0.062 + 0j),
                           (0.033 - 0.044j), (-0.002 - 0.038j), (-0.081 + 0.084j), (0.007 - 0.1j), (-0.001 - 0.113j),
                           (-0.021 - 0.005j), (0.136 - 0.105j), (0.098 - 0.044j), (0.011 - 0.002j), (-0.033 + 0.044j),
                           (-0.06 + 0.124j), (0.01 + 0.097j), -0.008j, (0.018 - 0.083j), (-0.069 + 0.027j)]

    expected = np.concatenate([expect_short_train, expect_short_train, expect_signal_field])
    output = np.round(make_tx(), 3)

    print(expected.shape, output.shape)
    np.testing.assert_equal(expected, output[:len(expected)])

    offset = 0
    np.testing.assert_equal(expect_short_train, output[offset:len(expect_short_train)])
    offset += len(expect_short_train)

    np.testing.assert_equal(expect_long_train,
                            output[offset: offset + len(expect_long_train)])
    offset += len(expect_long_train)

    # np.testing.assert_equal(expect_signal_field,
    #                         output[offset: offset + len(expect_signal_field)])
    # offset += len(expect_long_train)

    pass
