import numpy as np


def ifft_guard_window(symbols):
    """ Takes 64 input symbols in Freq domain and outputs 80 outputs in time domain.
    Includes Guard interval"""

    symbols = np.fft.fftshift(symbols) # took me 1h to figure out i need this call :D
    ifft = np.fft.ifft(symbols)

    result = np.concatenate([ifft[48:], ifft, [ifft[0]]])
    result[0] *= 0.5
    result[-1] *= 0.5
    return result.astype(np.complex64)


def test_signal():
    input = np.array([0j, 0j, 0j, 0j, 0j, 0j, (1 + 0j), (-1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (1 + 0j), (1 + 0j), (-1 + 0j),
             (-1 + 0j), (1 + 0j), (1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j),
             (-1 + 0j), (1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j), 0j, (1 + 0j),
             (-1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j), (1 + 0j), (1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j),
             (1 + 0j), (-1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j), (-1 + 0j),
             (1 + 0j), (-1 + 0j), (1 + 0j), (-1 + 0j), (-1 + 0j), 0j, 0j, 0j, 0j, 0j], dtype=np.complex64)

    expected = np.array([(0.031 + 0j), (0.033 - 0.044j), (-0.002 - 0.038j), (-0.081 + 0.084j), (0.007 - 0.1j), (-0.001 - 0.113j),
                (-0.021 - 0.005j), (0.136 - 0.105j), (0.098 - 0.044j), (0.011 - 0.002j), (-0.033 + 0.044j),
                (-0.06 + 0.124j), (0.01 + 0.097j), -0.008j, (0.018 - 0.083j), (-0.069 + 0.027j), (-0.219 + 0j),
                (-0.069 - 0.027j), (0.018 + 0.083j), 0.008j, (0.01 - 0.097j), (-0.06 - 0.124j), (-0.033 - 0.044j),
                (0.011 + 0.002j), (0.098 + 0.044j), (0.136 + 0.105j), (-0.021 + 0.005j), (-0.001 + 0.113j),
                (0.007 + 0.1j), (-0.081 - 0.084j), (-0.002 + 0.038j), (0.033 + 0.044j), (0.062 + 0j), (0.057 + 0.052j),
                (0.016 + 0.174j), (0.035 + 0.116j), (-0.051 - 0.202j), (0.011 + 0.036j), (0.089 + 0.209j),
                (-0.049 - 0.008j), (-0.035 + 0.044j), (0.017 - 0.059j), (0.053 - 0.017j), (0.099 + 0.1j),
                (0.034 - 0.148j), (-0.003 - 0.094j), (-0.12 + 0.042j), (-0.136 - 0.07j), (-0.031 + 0j),
                (-0.136 + 0.07j), (-0.12 - 0.042j), (-0.003 + 0.094j), (0.034 + 0.148j), (0.099 - 0.1j),
                (0.053 + 0.017j), (0.017 + 0.059j), (-0.035 - 0.044j), (-0.049 + 0.008j), (0.089 - 0.209j),
                (0.011 - 0.036j), (-0.051 + 0.202j), (0.035 - 0.116j), (0.016 - 0.174j), (0.057 - 0.052j), (0.062 + 0j),
                (0.033 - 0.044j), (-0.002 - 0.038j), (-0.081 + 0.084j), (0.007 - 0.1j), (-0.001 - 0.113j),
                (-0.021 - 0.005j), (0.136 - 0.105j), (0.098 - 0.044j), (0.011 - 0.002j), (-0.033 + 0.044j),
                (-0.06 + 0.124j), (0.01 + 0.097j), -0.008j, (0.018 - 0.083j), (-0.069 + 0.027j), (-0.109 + 0j)], dtype=np.complex64)

    output = np.round(ifft_guard_window(input), 3)

    # [-0.219 + 0.j     0.069 + 0.027j  0.018 + 0.083j - 0. - 0.008j  0.01 - 0.097j
    #  0.06 + 0.124j - 0.033 - 0.044j - 0.011 - 0.002j  0.098 + 0.044j - 0.136 - 0.105j
    #  - 0.021 + 0.005j  0.001 - 0.113j  0.007 + 0.1j    0.081 + 0.084j - 0.002 + 0.038j
    #  - 0.033 - 0.044j  0.062 + 0.j - 0.057 - 0.052j  0.016 + 0.174j - 0.035 - 0.116j
    #  - 0.051 - 0.202j - 0.011 - 0.036j  0.089 + 0.209j  0.049 + 0.008j - 0.035 + 0.044j
    #  - 0.017 + 0.059j  0.053 - 0.017j - 0.099 - 0.1j    0.034 - 0.148j  0.003 + 0.094j
    #  - 0.12 + 0.042j  0.136 + 0.07j - 0.031 + 0.j     0.136 - 0.07j - 0.12 - 0.042j
    #  0.003 - 0.094j  0.034 + 0.148j - 0.099 + 0.1j    0.053 + 0.017j - 0.017 - 0.059j
    #  - 0.035 - 0.044j  0.049 - 0.008j  0.089 - 0.209j - 0.011 + 0.036j - 0.051 + 0.202j
    #  - 0.035 + 0.116j  0.016 - 0.174j - 0.057 + 0.052j  0.062 + 0.j - 0.033 + 0.044j
    #  - 0.002 - 0.038j  0.081 - 0.084j  0.007 - 0.1j    0.001 + 0.113j - 0.021 - 0.005j
    #  - 0.136 + 0.105j  0.098 - 0.044j - 0.011 + 0.002j - 0.033 + 0.044j  0.06 - 0.124j
    #  0.01 + 0.097j - 0. + 0.008j  0.018 - 0.083j  0.069 - 0.027j]

    np.testing.assert_equal(expected, output)


def test_():
    """ Table I-25â€”Time domain representation of the DATA field: symbol 1of 6 """
    input = [0j, 0j, 0j, 0j, 0j, 0j, (-0.316 + 0.316j), (-0.316 + 0.316j), (0.316 + 0.316j), (-0.949 - 0.949j),
             (0.316 + 0.949j), (1 + 0j), (0.316 + 0.316j), (0.316 - 0.949j), (-0.316 - 0.949j), (-0.316 + 0.316j),
             (-0.949 + 0.316j), (-0.949 - 0.949j), (-0.949 - 0.949j), (0.949 + 0.316j), (0.316 + 0.316j),
             (-0.949 - 0.316j), (-0.949 - 0.316j), (-0.949 - 0.316j), (-0.949 - 0.949j), (1 + 0j), (0.949 - 0.316j),
             (0.949 + 0.949j), (-0.949 - 0.316j), (0.316 - 0.316j), (-0.949 - 0.316j), (-0.949 + 0.949j), 0j,
             (-0.316 + 0.949j), (0.316 + 0.949j), (-0.949 + 0.316j), (0.949 - 0.949j), (0.316 + 0.316j),
             (-0.316 - 0.316j), (1 + 0j), (-0.316 + 0.949j), (0.949 - 0.316j), (-0.949 - 0.316j), (0.949 + 0.316j),
             (-0.316 + 0.949j), (0.949 + 0.316j), (0.949 - 0.316j), (0.949 - 0.949j), (-0.316 - 0.949j),
             (-0.949 + 0.316j), (-0.949 - 0.949j), (-0.949 - 0.949j), (-0.949 - 0.949j), (-1 + 0j), (0.316 - 0.316j),
             (0.949 + 0.316j), (-0.949 + 0.316j), (-0.316 + 0.949j), (0.316 - 0.316j), 0j, 0j, 0j, 0j, 0j]
    expected = [(-0.139 + 0.05j), (0.004 + 0.014j), (0.011 - 0.1j), (-0.097 - 0.02j), (0.062 + 0.081j),
                (0.124 + 0.139j), (0.104 - 0.015j), (0.173 - 0.14j), (-0.04 + 0.006j), (-0.133 + 0.009j),
                (-0.002 - 0.043j), (-0.047 + 0.092j), (-0.109 + 0.082j), (-0.024 + 0.01j), (0.096 + 0.019j),
                (0.019 - 0.023j), (-0.087 - 0.049j), (0.002 + 0.058j), (-0.021 + 0.228j), (-0.103 + 0.023j),
                (-0.019 - 0.175j), (0.018 + 0.132j), (-0.071 + 0.16j), (-0.153 - 0.062j), (-0.107 + 0.028j),
                (0.055 + 0.14j), (0.07 + 0.103j), (-0.056 + 0.025j), (-0.043 + 0.002j), (0.016 - 0.118j),
                (0.026 - 0.071j), (0.033 + 0.177j), (0.02 - 0.021j), (0.035 - 0.088j), (-0.008 + 0.101j),
                (-0.035 - 0.01j), (0.065 + 0.03j), (0.092 - 0.034j), (0.032 - 0.123j), (-0.018 + 0.092j), -0.006j,
                (-0.006 - 0.056j), (-0.019 + 0.04j), (0.053 - 0.131j), (0.022 - 0.133j), (0.104 - 0.032j),
                (0.163 - 0.045j), (-0.105 - 0.03j), (-0.11 - 0.069j), (-0.008 - 0.092j), (-0.049 - 0.043j),
                (0.085 - 0.017j), (0.09 + 0.063j), (0.015 + 0.153j), (0.049 + 0.094j), (0.011 + 0.034j),
                (-0.012 + 0.012j), (-0.015 - 0.017j), (-0.061 + 0.031j), (-0.07 - 0.04j), (0.011 - 0.109j),
                (0.037 - 0.06j), (-0.003 - 0.178j), (-0.007 - 0.128j), (-0.059 + 0.1j), (0.004 + 0.014j),
                (0.011 - 0.1j), (-0.097 - 0.02j), (0.062 + 0.081j), (0.124 + 0.139j), (0.104 - 0.015j),
                (0.173 - 0.14j), (-0.04 + 0.006j), (-0.133 + 0.009j), (-0.002 - 0.043j), (-0.047 + 0.092j),
                (-0.109 + 0.082j), (-0.024 + 0.01j), (0.096 + 0.019j), (0.019 - 0.023j)]

    output = np.round(ifft_guard_window(input), 3)
    np.testing.assert_equal(expected, output)
